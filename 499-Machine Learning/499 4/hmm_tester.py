from hmm import forward,viterbi
import numpy as np

if __name__ == '__main__':
    test_a1 = np.array([[0.5,0.5],[0.4,0.6]])
    test_b1 = np.array([[0.2,0.3,0.3,0.2],[0.3,0.2,0.2,0.3]])
    test_pi1 = np.array([0.5,0.5])
    test_o1 = np.array([2,2,1,0,1,3,2,0,0])
    forward1 = 3.79101603552e-06
    viterbi1 = [0, 0, 0, 1, 1, 1, 1, 1, 1]
    alpha1 = np.asarray([[1.50000000e-01, 3.45000000e-02, 8.41500000e-03, 1.37670000e-03,
                           5.02479000e-04, 8.49394200e-05, 3.11522454e-05, 5.26764649e-06,1.28802755e-06],
                           
                           [1.00000000e-01, 2.70000000e-02, 6.69000000e-03, 2.46645000e-03,
                           4.33644000e-04, 1.53427770e-04, 2.69052744e-05, 9.51578620e-06,2.50298849e-06]])
    delta1 = np.asarray([[1.500000e-01, 2.250000e-02, 3.375000e-03, 3.375000e-04,6.075000e-05, 6.075000e-06, 1.312200e-06, 1.312200e-07,1.889568e-08],
            [1.000000e-01, 1.500000e-02, 2.250000e-03, 5.062500e-04,6.075000e-05, 1.093500e-05, 1.312200e-06, 2.361960e-07,4.251528e-08]])

    test_a2 = np.array([[0.3, 0.25, 0.45],[0.35,0.3,0.35],[0.35,0.3,0.35]])
    test_b2 = np.array([[0.2,0.15,0.25,0.2,0.2],[0.3,0.2,0.15,0.15,0.2],[0.3,0.2,0.15,0.2,0.15]])
    test_pi2 = np.array([0.35,0.35,0.25])
    test_o2 = np.array([3,2,1,2,3,1,2,3,1,2,3,2,2,1,1,1,2,3,4,4,2,3,1,2,2,3,1,2,1,2,2,3])
    forward2 = 2.70357885710974e-24
    viterbi2 = [0, 0, 2, 0, 2, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 2, 0, 2, 0, 2, 0, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 2]
    alpha2 = np.asarray([[7.00000000e-02, 1.42187500e-02, 1.55039062e-03, 4.87744141e-04,
                           6.96342773e-05, 9.88026031e-06, 3.05582829e-06, 4.36524694e-07,
                           6.19349053e-08, 1.91556591e-08, 2.73638331e-09, 6.47071612e-10,
                           1.16750572e-10, 1.28116397e-11, 2.41716281e-12, 4.42220952e-13,
                           1.35024018e-13, 1.92966459e-14, 3.65033667e-15, 6.58145629e-16,
                           1.48642959e-16, 2.14999468e-17, 3.04761952e-18, 9.42638893e-19,
                           1.68319496e-19, 2.46420487e-20, 3.48990413e-21, 1.07949383e-21,
                           1.15653753e-22, 3.64310793e-23, 6.50121196e-24, 9.51813869e-25],

                           [5.25000000e-02, 7.23750000e-03, 1.75156250e-03, 2.49178711e-04,
                           4.42423096e-05, 1.11922485e-05, 1.56098284e-06, 2.77348916e-07,
                           7.01591422e-08, 9.78512300e-09, 1.73857964e-09, 3.29847847e-10,
                           5.93498602e-11, 1.44750875e-11, 2.74416944e-12, 5.01942284e-13,
                           6.89671154e-14, 1.22603181e-14, 3.10129337e-15, 5.58910058e-16,
                           7.57397945e-17, 1.36621341e-17, 3.45227952e-18, 4.81520410e-19,
                           8.55543418e-20, 1.56609747e-20, 3.95325894e-21, 5.51429071e-22,
                           1.30633584e-22, 1.86120689e-23, 3.30444714e-24, 6.04914760e-25], 

                           [5.00000000e-02, 1.01062500e-02, 2.49375000e-03, 3.27530273e-04,
                           8.42666016e-05, 1.52627087e-05, 2.05580283e-06, 5.28199542e-07,
                           9.56756145e-08, 1.28869308e-08, 3.31105309e-09, 4.49811592e-10,
                           8.46094544e-11, 2.05847035e-11, 3.60723294e-12, 6.62142820e-13,
                           9.09643822e-14, 2.33473665e-14, 3.17192704e-15, 5.75741797e-16,
                           1.03994052e-16, 2.59592356e-17, 4.70849109e-18, 6.34154775e-19,
                           1.22201072e-19, 2.96916336e-20, 5.39246697e-21, 7.26219139e-22,
                           1.86589819e-22, 2.44608570e-23, 4.72042646e-24, 1.14685023e-24]])
    delta2 = np.asarray([[7.00000000e-02, 5.25000000e-03, 2.48062500e-04, 4.13437500e-05,
                           2.48062500e-06, 1.95349219e-07, 2.27907422e-08, 1.36744453e-09,
                           1.07686257e-10, 1.25633966e-11, 7.53803798e-13, 9.89367485e-14,
                           7.42025614e-15, 3.50607102e-16, 3.50607102e-17, 2.45424972e-18,
                           2.86329134e-19, 1.71797480e-20, 1.80387354e-21, 1.08232413e-22,
                           1.06541281e-23, 6.39247686e-25, 5.03407553e-26, 5.87308812e-27,
                           4.40481609e-28, 2.77503414e-29, 2.08127560e-30, 2.42815487e-31,
                           1.09266969e-32, 1.91217196e-33, 1.43412897e-34, 9.03501251e-36], 

                           [5.25000000e-02, 2.62500000e-03, 2.83500000e-04, 2.12625000e-05,
                           1.55039062e-06, 2.23256250e-07, 1.17209531e-08, 8.54652832e-10,
                           1.23070008e-10, 6.46117541e-12, 4.71127374e-13, 5.08817564e-14,
                           3.71012807e-15, 4.00693831e-16, 4.00693831e-17, 2.80485682e-18,
                           1.47254983e-19, 1.07373425e-20, 1.54617732e-21, 9.27706393e-23,
                           5.47926588e-24, 3.99529804e-25, 5.75322918e-26, 3.02044532e-27,
                           2.20240804e-28, 1.78395052e-29, 2.37860069e-30, 1.24876536e-31,
                           1.21407743e-32, 9.83402722e-34, 7.17064485e-35, 5.80822233e-36], 

                           [5.00000000e-02, 4.72500000e-03, 4.72500000e-04, 2.48062500e-05,
                           3.72093750e-06, 2.60465625e-07, 1.36744453e-08, 2.05116680e-09,
                           1.43581676e-10, 7.53803798e-12, 1.13070570e-12, 5.93620491e-14,
                           6.67823052e-15, 6.67823052e-16, 4.67476137e-17, 3.27233296e-18,
                           1.71797480e-19, 2.57696220e-20, 1.35290516e-21, 1.21761464e-22,
                           7.30568784e-24, 9.58871530e-25, 6.71210071e-26, 3.52385287e-27,
                           3.96433448e-28, 3.96433448e-29, 2.77503414e-30, 1.45689292e-31,
                           2.18533938e-32, 1.14730318e-33, 1.29071607e-34, 1.29071607e-35]])


    test_a3 = np.array([[0.18, 0.19, 0.23,0.17,0.23],[0.18,0.19,0.24,0.21,0.18],[0.22,0.19,0.22,0.18,0.19],[0.20,0.23,0.18,0.19,0.20],[0.24,0.19,0.17,0.23,0.17]])
    test_b3 = np.array([[0.2,0.19,0.21,0.2,0.2],[0.22,0.2,0.19,0.19,0.2],[0.22,0.2,0.19,0.2,0.19],[0.18, 0.19, 0.23,0.17,0.23],[0.19, 0.23,0.17,0.21,0.20]])
    test_pi3 = np.array([0.19,0.23,0.21,0.18,0.19])
    test_o3 = np.array([4,1,3,3,2,1,2,4,3,2,1,2,3,2,3,4,3,1,2,3,1,2,3,2,2,1,1,4,3,2,1,3,4,4,4,1,2,1,2,3,4,4,2,3,1,2,2,3,1,2,1,2,2,3])
    forward3 = 1.3247200087216223e-38
    viterbi3 = [1, 2, 0, 4, 0, 4, 3, 1, 2, 0, 4, 0, 4, 0, 4, 3, 0, 4, 3, 0, 4, 0, 4, 0, 2, 0, 4, 0, 4, 0, 4, 0, 4, 3, 0, 4, 0, 4, 0, 4, 3, 1, 2, 0, 4, 0, 2, 0, 4, 0, 4, 3, 1, 2]
    alpha3 = np.asarray([[3.80000000e-02, 7.84662000e-03, 1.68387736e-03, 3.25692509e-04,
                           6.64051086e-05, 1.17778586e-05, 2.66396578e-06, 4.95742656e-07,
                           1.01612574e-07, 2.07997222e-08, 3.68970711e-09, 8.34557703e-10,
                           1.55304532e-10, 3.20080485e-11, 5.97398247e-12, 1.17214436e-12,
                           2.37622043e-13, 4.40264851e-14, 9.84999305e-15, 1.83358881e-15,
                           3.41899012e-16, 7.64544605e-17, 1.42324421e-17, 2.93319019e-18,
                           5.74824029e-19, 1.02957290e-19, 2.10618202e-20, 4.46995381e-21,
                           9.04073466e-22, 1.85202982e-22, 3.28521555e-23, 7.07685785e-24,
                           1.36817420e-24, 2.77584964e-25, 5.65623076e-26, 1.09505693e-26,
                           2.46210893e-27, 4.35459411e-28, 9.85339080e-29, 1.83361297e-29,
                           3.59910048e-30, 7.29614070e-31, 1.56112151e-31, 2.92832980e-32,
                           5.45861546e-33, 1.22067224e-33, 2.38596630e-34, 4.49997718e-35,
                           8.38448707e-36, 1.87500955e-36, 3.31590658e-37, 7.50302354e-38,
                           1.46604586e-38, 2.76506979e-39],

                           [4.60000000e-02, 8.05660000e-03, 1.53874409e-03, 2.97848159e-04,
                           5.78004296e-05, 1.21867170e-05, 2.31648013e-06, 4.87615487e-07,
                           9.41960865e-08, 1.81066294e-08, 3.81787694e-09, 7.25698545e-10,
                           1.45120561e-10, 2.78419025e-11, 5.57904130e-12, 1.12692326e-12,
                           2.20453609e-13, 4.45870349e-14, 8.57135474e-15, 1.71324390e-15,
                           3.46003892e-16, 6.65324693e-17, 1.32982758e-17, 2.55141643e-18,
                           5.11259205e-19, 1.06458337e-19, 2.13090412e-20, 4.30182818e-21,
                           8.39169783e-22, 1.61210893e-22, 3.39935456e-23, 6.46144297e-24,
                           1.31712203e-24, 2.71057904e-25, 5.52349592e-26, 1.12566979e-26,
                           2.14255224e-27, 4.50847330e-28, 8.56796323e-29, 1.71337868e-29,
                           3.46018512e-30, 7.12526494e-31, 1.37928901e-31, 2.73470251e-32,
                           5.52439037e-33, 1.06225451e-33, 2.12320043e-34, 4.19927288e-35,
                           8.48580115e-36, 1.63166741e-36, 3.43297896e-37, 6.52421783e-38,
                           1.30467975e-38, 2.58028934e-39], 

                           [3.99000000e-02, 8.49400000e-03, 1.70201466e-03, 3.32209045e-04,
                           6.12475080e-05, 1.27633382e-05, 2.43493869e-06, 4.85065411e-07,
                           1.03524153e-07, 1.91887745e-08, 3.99842968e-09, 7.62809431e-10,
                           1.59957473e-10, 2.95113342e-11, 6.15031772e-12, 1.13477407e-12,
                           2.42160975e-13, 4.72527911e-14, 9.00628568e-15, 1.88847675e-15,
                           3.66750156e-16, 6.99081601e-17, 1.46584606e-17, 2.70439830e-18,
                           5.35430109e-19, 1.11550265e-19, 2.23982589e-20, 4.29382783e-21,
                           9.21721728e-22, 1.70848566e-22, 3.56010337e-23, 7.14933683e-24,
                           1.32580344e-24, 2.68726971e-25, 5.47702340e-26, 1.17491976e-26,
                           2.25163878e-27, 4.72100184e-28, 9.00609164e-29, 1.88855067e-29,
                           3.48427870e-30, 7.06374344e-31, 1.43967187e-31, 3.01529688e-32,
                           5.85556765e-33, 1.11615200e-33, 2.22334873e-34, 4.63169524e-35,
                           8.99447450e-36, 1.71445774e-36, 3.59490729e-37, 6.85783130e-38,
                           1.36616400e-38, 2.84600300e-39],

                           [4.14000000e-02, 7.58252000e-03, 1.37301335e-03, 2.65087121e-04,
                           6.96231474e-05, 1.12865445e-05, 2.79960526e-06, 5.46456624e-07,
                           8.29723865e-08, 2.18195037e-08, 3.53577544e-09, 8.77051111e-10,
                           1.26533234e-10, 3.35752445e-11, 4.86599370e-12, 1.29100365e-12,
                           1.93935039e-13, 4.21698372e-14, 1.03465658e-14, 1.49392755e-15,
                           3.27452724e-16, 8.03081427e-17, 1.15959722e-17, 3.07680167e-18,
                           6.03298376e-19, 9.87093103e-20, 2.02090987e-20, 4.93135372e-21,
                           7.38063571e-22, 1.94288168e-22, 3.14815595e-23, 5.77190862e-24,
                           1.50658946e-24, 3.06515558e-25, 6.24914198e-26, 1.05203264e-26,
                           2.58767561e-27, 4.17401171e-28, 1.03551691e-28, 1.49392274e-29,
                           3.96408787e-30, 8.05641210e-31, 1.64263622e-31, 2.38654662e-32,
                           5.22790759e-33, 1.28220085e-33, 2.50484951e-34, 3.66718248e-35,
                           8.03000385e-36, 1.96952095e-36, 3.17841835e-37, 7.88510252e-38,
                           1.53906746e-38, 2.25335195e-39],

                           [3.80000000e-02, 9.04843000e-03, 1.66393662e-03, 3.24475286e-04,
                           5.09693808e-05, 1.37778517e-05, 2.02760606e-06, 4.79386197e-07,
                           1.01795611e-07, 1.59622363e-08, 4.31628982e-09, 6.35201002e-10,
                           1.57689461e-10, 2.45390781e-11, 6.06212025e-12, 1.11011259e-12,
                           2.38342929e-13, 5.05196404e-14, 7.50585606e-15, 1.86161750e-15,
                           3.91961491e-16, 5.82630802e-17, 1.44499473e-17, 2.24875053e-18,
                           4.49713292e-19, 1.20308133e-19, 2.39732387e-20, 4.21055711e-21,
                           9.07265349e-22, 1.42113610e-22, 3.84313489e-23, 6.98642104e-24,
                           1.29823687e-24, 2.65136569e-25, 5.40138834e-26, 1.26588808e-26,
                           1.87565405e-27, 5.09714991e-28, 7.49936302e-29, 1.86177520e-29,
                           3.40850021e-30, 6.96980399e-31, 1.20681647e-31, 2.97056270e-32,
                           6.25823951e-33, 9.30225024e-34, 1.86763314e-34, 4.56088946e-35,
                           9.61324944e-36, 1.42886353e-36, 3.88127367e-37, 5.71051642e-38,
                           1.14764465e-38, 2.80248600e-39]])
    delta3 = np.asarray([[3.80000000e-02, 1.73280000e-03, 9.71520000e-05, 4.27468800e-06,
                           2.36499057e-07, 9.43274610e-09, 6.30544325e-10, 2.64728530e-11,
                           1.39224187e-12, 6.75121286e-14, 2.57031972e-15, 1.79998137e-16,
                           7.55706464e-18, 4.38173065e-19, 1.83963136e-20, 1.01586043e-21,
                           4.47825141e-23, 2.23741229e-24, 1.19397348e-25, 5.01279341e-27,
                           2.62970271e-28, 1.33649093e-29, 5.61114048e-31, 3.25344660e-32,
                           1.43422771e-33, 5.94294076e-35, 3.45970145e-36, 1.50903152e-37,
                           7.63902079e-39, 3.67346560e-40, 1.46515884e-41, 9.32766386e-43,
                           3.74587136e-44, 2.05954818e-45, 9.07917489e-47, 4.32010826e-48,
                           2.42065329e-49, 9.65475645e-51, 6.45384899e-52, 2.70959215e-53,
                           1.49626035e-54, 6.59601437e-56, 3.46892999e-57, 1.52193797e-58,
                           7.64024893e-60, 4.05773014e-61, 1.78878270e-62, 7.80220352e-64,
                           3.93975813e-65, 2.08019229e-66, 8.29683045e-68, 5.54612549e-69,
                           2.44491698e-70, 1.06640901e-71], 
                            
                          [4.60000000e-02, 1.90440000e-03, 8.02069800e-05, 3.50718720e-06,
                           1.69397142e-07, 1.14185874e-08, 4.51639883e-10, 3.04437810e-11,
                           1.26387357e-12, 5.27529836e-14, 3.11143966e-15, 1.28927237e-16,
                           8.25609312e-18, 3.13850151e-19, 2.00979726e-20, 8.04222843e-22,
                           4.89248966e-23, 1.86451024e-24, 9.37009621e-26, 5.47647680e-27,
                           2.19141892e-28, 1.10129758e-29, 6.13017098e-31, 2.33034568e-32,
                           1.49227978e-33, 6.86448699e-35, 2.88308454e-36, 1.52515172e-37,
                           7.26765298e-39, 2.75768651e-40, 1.77361333e-41, 7.01518053e-43,
                           3.54451227e-44, 1.72204836e-45, 1.04410511e-46, 4.56273934e-48,
                           1.82053300e-49, 1.16873368e-50, 4.62269739e-52, 2.96022943e-53,
                           1.18453944e-54, 7.58541653e-56, 3.14908567e-57, 1.60106145e-58,
                           6.36687411e-60, 3.19967258e-61, 1.86118581e-62, 8.13338201e-64,
                           3.39480293e-65, 1.64993787e-66, 1.00435316e-67, 3.97252242e-69,
                           2.54387791e-70, 1.11167465e-71], 

                          [3.99000000e-02, 2.20800000e-03, 9.71520000e-05, 4.46899200e-06,
                           1.86803866e-07, 1.08789566e-08, 5.20687585e-10, 2.75547870e-11,
                           1.46130149e-12, 6.10824021e-14, 3.10555792e-15, 1.41881648e-16,
                           8.27991430e-18, 3.76477846e-19, 2.01559610e-20, 9.16467550e-22,
                           4.67295799e-23, 2.34839504e-24, 9.81629126e-26, 5.49227800e-27,
                           2.62870886e-28, 1.14918008e-29, 6.14785827e-31, 2.79535797e-32,
                           1.42175616e-33, 7.16294295e-35, 3.29495376e-36, 1.51188953e-37,
                           7.32072826e-39, 3.33825209e-40, 1.68979418e-41, 8.51334400e-43,
                           4.07618911e-44, 1.70384705e-45, 9.00022555e-47, 5.01170454e-48,
                           2.09489250e-49, 1.11350052e-50, 5.32942556e-52, 2.96877053e-53,
                           1.34986462e-54, 6.53865772e-56, 3.45894994e-57, 1.59570780e-58,
                           7.68509497e-60, 3.33878878e-61, 1.77322807e-62, 8.93369191e-64,
                           3.93082444e-65, 1.72167430e-66, 9.56888455e-68, 4.57985041e-69,
                           2.42365684e-70, 1.22106140e-71], 

                          [4.14000000e-02, 1.83540000e-03, 7.85988200e-05, 3.44467872e-06,
                           2.48230161e-07, 8.96110880e-09, 6.61821325e-10, 2.89215919e-11,
                           1.13409702e-12, 6.76399925e-14, 2.44180373e-15, 1.88926616e-16,
                           6.10232969e-18, 4.59907840e-19, 1.48550232e-20, 1.11956285e-21,
                           3.61618801e-23, 2.14418677e-24, 1.25319835e-25, 4.04783068e-27,
                           2.52013176e-28, 1.40278512e-29, 4.53099594e-31, 3.41482788e-32,
                           1.49227978e-33, 5.95419633e-35, 3.31554722e-36, 1.66307848e-37,
                           6.22261902e-39, 3.85568116e-40, 1.39190090e-41, 7.59815952e-43,
                           3.74358340e-44, 2.26979372e-45, 9.91899857e-47, 4.16597940e-48,
                           2.54072538e-49, 9.17201863e-51, 6.77398038e-52, 2.18799566e-53,
                           1.64900359e-54, 7.20614570e-56, 3.66375618e-57, 1.18339325e-58,
                           7.32190522e-60, 4.25900644e-61, 1.86118581e-62, 6.64443336e-64,
                           3.77560154e-65, 2.18337643e-66, 7.88198893e-68, 5.82123092e-69,
                           2.54387791e-70, 9.08164414e-72], 

                          [3.80000000e-02, 2.01020000e-03, 8.80992000e-05, 4.69244160e-06,
                           1.67140301e-07, 1.25108001e-08, 3.68820373e-10, 2.90050389e-11,
                           1.27863880e-12, 5.44366571e-14, 3.57139161e-15, 1.03213217e-16,
                           8.69391001e-18, 2.95481227e-19, 2.11637590e-20, 8.46230425e-22,
                           4.90660589e-23, 2.36899500e-24, 8.74828204e-26, 5.76689190e-27,
                           2.65176771e-28, 1.02821376e-29, 6.45525118e-31, 2.19395593e-32,
                           1.27209762e-33, 7.58706457e-35, 3.14381566e-36, 1.59146266e-37,
                           7.28862223e-39, 2.98685713e-40, 1.94326330e-41, 7.07671720e-43,
                           4.29072538e-44, 1.72310083e-45, 9.47392163e-47, 4.80288352e-48,
                           1.68916233e-49, 1.28052559e-50, 3.77500977e-52, 3.11720906e-53,
                           1.24641239e-54, 6.88279760e-56, 2.57904162e-57, 1.67549319e-58,
                           8.05105187e-60, 2.98733733e-61, 1.58657249e-62, 8.63982046e-64,
                           4.12736566e-65, 1.54044543e-66, 1.10042172e-67, 3.24406071e-69,
                           2.16853506e-70, 1.18089490e-71]])
    print("********************************************")

    print("TESTING VITERBI ALGORITHM: 1")
    test_viterbi, test_delta = viterbi(test_a1,test_b1,test_pi1,test_o1)
    #print("test delta")
    #print("delta1 = " + str(list(test_delta)))
    #print("test_viterbi")
    #print("viterbi1 = " + str(list(np.uint8(test_viterbi))))
    
    print("********************************************")
    print('Viterbi1 result test: {}'.format((test_viterbi == viterbi1).all()))
    print('Viterbi1 delta test: {}'.format(np.all(np.abs(test_delta - delta1) < 10 ** -5)))
    print("********************************************")

    print("TESTING VITERBI ALGORITHM: 2")
    test_viterbi, test_delta = viterbi(test_a2,test_b2,test_pi2,test_o2)
    #print("test delta")
    #print("delta2 = " + str(list(test_delta)))
    #print("test_viterbi")
    #print("viterbi2 = " + str(list(np.uint8(test_viterbi))))

    print("********************************************")
    print('Viterbi2 result test: {}'.format((test_viterbi == viterbi2).all()))
    print('Viterbi2 delta test: {}'.format(np.all(np.abs(test_delta - delta2) < 10 ** -5)))
    print("********************************************")
    
    print("TESTING VITERBI ALGORITHM: 3")
    test_viterbi, test_delta = viterbi(test_a3,test_b3,test_pi3,test_o3)
    #print("test delta")
    #print("delta3 = " + str(list(test_delta)))
    #print("test_viterbi")
    #print("viterbi3 = " + str(list(np.uint8(test_viterbi))))
    
    print("********************************************")
    print('Viterbi3 result test: {}'.format((test_viterbi == viterbi3).all()))
    print('Viterbi3 delta test: {}'.format(np.all(np.abs(test_delta - delta3) < 10 ** -5)))
    print("********************************************")
    print("--------------------------------------------")
    print("********************************************")

    print("TESTING FORWARD ALGORITHM: 1")
    test_forward, test_alpha = forward(test_a1,test_b1,test_pi1,test_o1)
    #print("test alpha")
    #print("alpha1 = " + str(list(test_alpha)))
    #print("test_forward")
    #print("forward1 = " + str(test_forward))

    print("********************************************")
    print('Forward1 result test: {}'.format(abs(test_forward - forward1) < 10 ** -5))
    print('Forward1 alpha test: {}'.format(np.all(np.abs(test_alpha - alpha1) < 10 ** -5)))
    print("********************************************")

    print("TESTING FORWARD ALGORITHM: 2")
    test_forward, test_alpha = forward(test_a2,test_b2,test_pi2,test_o2)
    #print("test alpha")
    #print("alpha2 = " + str(list(test_alpha)))
    #print("test_forward")
    #print("forward2 = " + str(test_forward))
    
    print("********************************************")
    print('Forward2 result test: {}'.format(abs(test_forward - forward2) < 10 ** -5))
    print('Forward2 alpha test: {}'.format(np.all(np.abs(test_alpha - alpha2) < 10 ** -5)))
    print("********************************************")
    
    print("TESTING FORWARD ALGORITHM: 3")
    test_forward, test_alpha = forward(test_a3,test_b3,test_pi3,test_o3)
    #print("test alpha")
    #print("alpha3 = " + str(list(test_alpha)))
    #print("test_forward")
    #print("forward3 = " + str(test_forward))
    print("********************************************")
    print('Forward3 result test: {}'.format(abs(test_forward - forward3) < 10 ** -5))
    print('Forward3 alpha test: {}'.format(np.all(np.abs(test_alpha - alpha3) < 10 ** -5)))
    print("--------------------------------------------")
    print("********************************************")